The XSM (eXperimental String Machine) Simulator is used to simulate the XSM hardware.
xfs interface to use xsm disk
coding language spl
we have orange block and some part of blue box on top
The compilers allow you to write high level code and translate it into the XSM machine code. We will look at them in later stages. The XFS-Inteface tool helps you to transfer files between your Linux/Unix system and the XSM machines disk.
 When files are stored in the disk, some format has to be followed so that one can figure out where in the disk are the blocks of a file located.
XSM disk is formatted to what is known as the eXpFS file system format.
The eXpFS format specifies that each data/executable file can span across at most four data blocks, and that the index to these blocks along with the name and the size of the file must be stored in a pre-define area of the disk called the Inode table. (The inode table is stored in disk blocks 3 and 4).
The eXpFS logical file system comprises of files organized in a single directory called the root. 
The root is also treated conceptually as a file.
There are three types of eXpFS files - the root, data files and executable files. Each file in eXpFS has an entry in the root called its root entry.
The root file has the name root and contains meta-data about the files stored in the file system. For each file stored in eXpFS, the root file stores three words of information - file name, file-size and file-type. This triple is called root entry of the file. The first root entry is for the root itself.
".dat" for data files). eXpFS treats every file other than root and executable files (will be described later) as a data file.
The Create system call automatically sets the file type field in the root entry
eXpFS specification does not allow executable files to be created by application programs. 
The executable file format recognized by eXpOS is called the Experimental executable file (XEXE) format. In this format, an executable file is divided into two sections. The first section is called header and the second section called the code (or text) section. The code section contains the program instructions. The header section contains information like the size of the text and data segments in the file, the space to be allocated for stack and heap areas when the program is loaded for execution etc. This information is used by the OS loader to map the file into a virtual address space and create a process in memory for executing the program. 
A UNIX file named "disk.xfs" simulates the hard disk of the XSM machine. 
eXpFS is a simulated file system	
The fdisk command converts the raw disk into the filesystem format recognised by the eXpOS operating system. It initialises the disk data structures such as disk free list, inode table, user table and root file. (This is why initially we ran fdisk command in xfs-interface) as a result of this command disk.xfs is created, which simulates the hard disk of the XSM machine and the disk is formatted to eXpFS.
The Disk Free List in XFS is a data structure which keeps track of used and unused blocks in the disk. An unused block is indicated by 0 and a used block is indicated by 1. (use the "df" command to see the Disk free list. DFL is itself stored in block 2)
The first 69 blocks (blocks 0 to 68) are reserved for Disk Structures, OS routines, Shell Code, Idle Code and INIT program
The owner of data files loaded through xfs-interface is the root.
Userid is the index of the user entry in the User Table. The userid of root is 1 and hence the userid field in the inode table is set to 1 for all data files loaded through the xfs interface. 
xfs-interface provides the export command to export files from the XSM machine to the UNIX machine in a single step.
# export sample.dat $HOME/myexpos/data.txt
Some other commands:
# load --data $HOME/myexpos/sample.dat  (to load the file to xfs disk)
An entry in the Inode Table will be created for this file and as well the root file.
inode is 3 to 4 whereas root file is at 5
# copy 3 4 $HOME/myexpos/inode_table.txt (to get the inode table)
Note: Instead of using the copy command you can use dump command provided by the XFS interface to directly copy the disk data structures (inode table, root file) to the UNIX machine as shown below.
# dump --inodeusertable
===========
# copy 69 69 $HOME/myexpos/data.txt
You will get back the contents of the file $HOME/myexpos/sample.dat in $HOME/myexpos/data.txt. However in $HOME/myexpos/data.txt, each word is displayed in a line because a word in XFS is 16 characters long
=======================About inode table========================
It consists of MAX_FILE_NUM entries. Thus eXpFS permits a maximum of MAX_FILE_NUM (equals 60 in our case) files.				
The current version of eXpOS limits the maximum number of blocks in an eXpFS file to MAX_FILE_BLOCKS = 4. Each Inode table entry consists of 16 words of which the 7 are unused in the present version of eXpOS. 
================================================================
Q1. When a file is created entries are made in the Inode table as well as the Root file. What is the need for this duplication?
Inode table is a data structure which is accessible only in Kernel mode, whereas Root file is accessible both in Kernel and User mode. This enables the user to search for a file from an application program itself by reading the Root file.
====================--XSM Instruction Execution Cycle--=================
The CPU of the XSM machine contains 20 general-purpose registers R0-R19, each of which can store an integer or a string. (see XSM specification). Along with these are the registers stack pointer (SP), base pointer (BP) and instruction pointer (IP). There are other special purpose registers: PTBR, PTLR, EIP, EC, EPN, EMA and four ports P0, P1, P2, P3
The machine's memory consists of 65536 memory words. Each word can store an integer or a string. The memory is divided into pages of 512 words each. (i.e. 128 pages since 512 * 128 == 65536)
Thus memory addresses 0 to 511 belong to page 0, 512-1023 belong to page 1 and so on. The last (page 127) contain memory addresses 65024 to 65535. The memory is word addressable. This means that XSM provides instructions that allows you to access any memory word.
The machine also has a disk having 512 blocks. Each disk block can store 512 words. Thus the total storage capacity is 512 x 512 = 262144 words. However, the disk is block addressable and not word addressable. XSM provides just three instructions to manipulate the disk â€“ LOAD, LOADI and STORE. 
These instructions can be used to transfer a disk block to a memory page or back. Suppose we want to access the 10th word of block 12, then the only way to do so is to first transfer the 12th block to some memory page and then access the corresponding memory address.
Note: The ExpOS documentation (unfortunately) uses the words "kernel mode" for privileged mode and "user mode" for unprivileged mode execution. This terminology arose because the OS kernel code runs in privileged mode and application programs run in unprivileged mode. However "kernel" and "user" are OS level abstractions, not connected to the machine, and the terminology is not used in this document while referring to architectural concepts. 
Boot-up
What happens when the machine is powered on?
All registers will be set to value zero. In particular, IP register also assumes value 0. Once powered on, the machine will start repeatedly executing the following fetch-execute cycle in privileged mode. (So ROM Code resides in page 0 of memory, ROM Code is also called "Boot Rom")
1. Transfer the contents of two memory locations starting at the address stored in IP register to the CPU. The XSM machine treats the contents read like a machine instruction. This action is called the instruction fetch cycle. (i.e.
Boot ROM code does the following operations :
    Loads block 0 of the disk to page 1 (so our OS startup code needs to be placed in page 1) of the memory (physical address 512). (LOADI 1, 0)
    After loading the block to memory, it sets the value of the register IP (Instruction Pointer) to 512 so that the next instruction is fetched from location 512 (page 1 in memory starts from location 512). (JMP 512)
)
2. The next step is the execute cycle where the instruction fetched in Step 1 is executed by the machine. What happens here depends on the instruction. (See XSM instruction set.) For example, if the instruction fetched is "MOV R0, [1256]", the execute cycle action will result in the contents of memory location 1256 being transferred to register R0. If the instruction fetched is "JMP 1110", the value of the IP register will be set to 1110.
3. The final step is to set the instruction pointer to the next instruction to be executed. Since each XSM instruction is two words, IP will normally be incremented by 2. There are exceptions to this rule. For instance in the case of "JMP 1110", IP is set to 1110 and hence not incremented. Thus the next fetch must be from 1110. After Step 3, the machine loops back to Step 1. 
The bootstrap code is hard coded into a boot ROM so that the memory contents are not lost even after machine shutdown. This is necessary because when the machine is powered on, there must be some meaningful instruction at address 0 from where the first fetch takes place. 
The PUSH instruction results in the following actions:
1. Contents of SP gets incremented by 1.
2. The data specified by the PUSH instruction is transferred to the location pointed to by SP.
3. IP gets incremented by 2 to point to the next instruction. 
Example:
MOV SP, 1000   //  SP register is loaded with value 1000.
PUSH R0    //  SP is set to 1001 and contents of R0 is copied to memory address 1001.
The POP instruction is a reverse operation to PUSH. The contents of the memory address pointed to by SP will be retrieved to a register specified, and SP is decremented. 
The CALL instruction results in the following:
1. Increment SP by one.
2. Transfer contents of IP register + 2 to the memory address pointed to by SP.
3. Set IP to the value of register/constant value specified in the CALL instruction.
Example:
MOV SP, 1000  //  SP is set 1000
CALL 21110   //  a) Increment SP to1001, b) Copy contents of IP to location 1001 c) MOV 21110 to IP register.
The RET instruction reverses the actions of a CALL instruction. The contents of address pointed to by SP register is copied to the IP register, and SP is decremented. Since IP is modified, the next instruction is fetched from the newly set value.
Finally, we initiate a discussion on the most complicated instruction â€“ IRET. This instruction can be only executed in privileged mode, but IRET is the only XSM instruction that results in the XSM machine to switch from the privileged mode to unprivileged mode. After an instruction fetch, if the XSM encounters the IRET instruction, the following actions take place:
1. Enable paging and change from privileged mode to unprivileged mode
2. Execute the RET instruction in the unprivileged mode. (The execution semantics now is different, and you must read XSM unpriviliged mode execution to understand how RET works in unprivileged mode). 
================--Module 3 summary--======================
MOV R0, "HELLO_WORLD"
MOV R16, R0
PORT P1, R16
OUT
HALT 

Save this file as $HOME/myexpos/spl/spl_progs/helloworld.xsm.
"""cd $HOME/myexpos/xfs-interface
./xfs-interface
# load --os $HOME/myexpos/spl/spl_progs/helloworld.xsm
# exit"""
Note that the --os option loads the file to Block 0 of the XFS disk. 
"""cd $HOME/myexpos/xsm
./xsm"""
The machine will halt after printing "HELLO_WORLD".
"""HELLO_WORLD
Machine is halting."""
=================--END--=============================
==================--Module 4 summary--======================
SPL (Systems Programming Language) (its documentation: http://exposnitc.github.io/support_tools-files/spl.html) allows high level programs to be written for the XSM machine (eliminating the need to write all the code in assembly language). Programs written in SPL language needs to be compiled to XSM assembly code using the SPL compiler supplied along with the eXpOS package before loading for execution on the XSM simulator. You will be writing the eXpOS kernel using the SPL language.
Wrote the following sml code:
alias counter R0; // An alias statement is used to associate a register/port with a name
counter = 0;
while (counter <= 20) do
  if (counter % 2 != 0) then
    print counter;
  endif;
  counter = counter + 1;
endwhile; 
then compiled it:
cd $HOME/myexpos/spl
./spl /home/sourabh/myexpos/spl/spl_progs/oddnos.spl
then we loaded oddnos.xsm as OS startup code
===================--END--=====================
===================--Module 5 summary--====================
The breakpoint statement translates to the BRKP machine instruction and is used for debugging. If the XSM machine is run in the Debug mode , on encountering the BRKP instruction, the machine simulator will suspend the program execution and allow you to inspect the values of the registers, memory, os data structures etc
To run the code in debug mode, use:
./xsm --debug
 The Machine pauses after the execution of the first BRKP instruction.
View the contents of registers using the command
reg
Enter the following command
mem 1
This will write the contents of memory page 1 to the file mem inside the xsm folder (if xsm is run from any other directory then the file mem will be created in that directory). Open this file and view the contents.
Use "s" step to the next instruction.
Press "c" to continue execution till the BRKP instruction is executed again.
=====================--END--=============================
==============-USEFUL SYNTAX-================
 Syntax : PORT Pi, Rj
Semantics : Transfers the contents of register Rj to port Pi. 
 Syntax: OUT
Semantics: Transfers the contents of P1 to the standard output immediately. 
Syntax : HALT
Semantics : This instruction causes the machine to halt immediately.
LT, GT, EQ, NE, GE, LE
Syntax : OP Ri, Rj
Semantics : Stores 1 in Ri if the value stored in Ri is less than/greater than/equal to/not equal to/greater than or equal to/less than or equal to that in Rj. Ri is set to 0 otherwise.
Ri/Rj may be any register except IP. 
Syntax : JZ Ri, target_address
Semantics : Jumps to target_address if the contents of Ri is zero.
